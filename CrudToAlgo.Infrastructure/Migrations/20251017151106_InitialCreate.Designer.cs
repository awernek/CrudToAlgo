// <auto-generated />
using System;
using CrudToAlgo.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CrudToAlgo.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251017151106_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CrudToAlgo.Domain.Entities.CasoTeste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DesafioId")
                        .HasColumnType("integer");

                    b.Property<string>("Entrada")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Publico")
                        .HasColumnType("boolean");

                    b.Property<string>("SaidaEsperada")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DesafioId");

                    b.ToTable("casos_teste", (string)null);
                });

            modelBuilder.Entity("CrudToAlgo.Domain.Entities.Desafio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Dificuldade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("desafios", (string)null);
                });

            modelBuilder.Entity("CrudToAlgo.Domain.Entities.Submissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataEnvio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DesafioId")
                        .HasColumnType("integer");

                    b.Property<string>("Linguagem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PontosGanho")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DesafioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("submissoes", (string)null);
                });

            modelBuilder.Entity("CrudToAlgo.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Pontos")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("CrudToAlgo.Domain.Entities.CasoTeste", b =>
                {
                    b.HasOne("CrudToAlgo.Domain.Entities.Desafio", "Desafio")
                        .WithMany("CasosTeste")
                        .HasForeignKey("DesafioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Desafio");
                });

            modelBuilder.Entity("CrudToAlgo.Domain.Entities.Submissao", b =>
                {
                    b.HasOne("CrudToAlgo.Domain.Entities.Desafio", "Desafio")
                        .WithMany()
                        .HasForeignKey("DesafioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrudToAlgo.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Desafio");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CrudToAlgo.Domain.Entities.Desafio", b =>
                {
                    b.Navigation("CasosTeste");
                });
#pragma warning restore 612, 618
        }
    }
}
